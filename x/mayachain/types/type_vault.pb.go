// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mayachain/v1/x/mayachain/types/type_vault.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	common "gitlab.com/mayachain/mayanode/common"
	gitlab_com_mayachain_mayanode_common "gitlab.com/mayachain/mayanode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VaultType int32

const (
	VaultType_UnknownVault   VaultType = 0
	VaultType_AsgardVault    VaultType = 1
	VaultType_YggdrasilVault VaultType = 2
)

var VaultType_name = map[int32]string{
	0: "UnknownVault",
	1: "AsgardVault",
	2: "YggdrasilVault",
}

var VaultType_value = map[string]int32{
	"UnknownVault":   0,
	"AsgardVault":    1,
	"YggdrasilVault": 2,
}

func (x VaultType) String() string {
	return proto.EnumName(VaultType_name, int32(x))
}

func (VaultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d76f5cca38dcd496, []int{0}
}

type VaultStatus int32

const (
	VaultStatus_InactiveVault VaultStatus = 0
	VaultStatus_ActiveVault   VaultStatus = 1
	VaultStatus_RetiringVault VaultStatus = 2
	VaultStatus_InitVault     VaultStatus = 3
)

var VaultStatus_name = map[int32]string{
	0: "InactiveVault",
	1: "ActiveVault",
	2: "RetiringVault",
	3: "InitVault",
}

var VaultStatus_value = map[string]int32{
	"InactiveVault": 0,
	"ActiveVault":   1,
	"RetiringVault": 2,
	"InitVault":     3,
}

func (x VaultStatus) String() string {
	return proto.EnumName(VaultStatus_name, int32(x))
}

func (VaultStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d76f5cca38dcd496, []int{1}
}

type Vault struct {
	BlockHeight           int64                                       `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	PubKey                gitlab_com_mayachain_mayanode_common.PubKey `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3,casttype=gitlab.com/mayachain/mayanode/common.PubKey" json:"pub_key,omitempty"`
	Coins                 gitlab_com_mayachain_mayanode_common.Coins  `protobuf:"bytes,3,rep,name=coins,proto3,castrepeated=gitlab.com/mayachain/mayanode/common.Coins" json:"coins"`
	Type                  VaultType                                   `protobuf:"varint,4,opt,name=type,proto3,enum=types.VaultType" json:"type,omitempty"`
	Status                VaultStatus                                 `protobuf:"varint,5,opt,name=status,proto3,enum=types.VaultStatus" json:"status,omitempty"`
	StatusSince           int64                                       `protobuf:"varint,6,opt,name=status_since,json=statusSince,proto3" json:"status_since,omitempty"`
	Membership            []string                                    `protobuf:"bytes,7,rep,name=membership,proto3" json:"membership,omitempty"`
	Chains                []string                                    `protobuf:"bytes,8,rep,name=chains,proto3" json:"chains,omitempty"`
	InboundTxCount        int64                                       `protobuf:"varint,9,opt,name=inbound_tx_count,json=inboundTxCount,proto3" json:"inbound_tx_count,omitempty"`
	OutboundTxCount       int64                                       `protobuf:"varint,10,opt,name=outbound_tx_count,json=outboundTxCount,proto3" json:"outbound_tx_count,omitempty"`
	PendingTxBlockHeights []int64                                     `protobuf:"varint,11,rep,packed,name=pending_tx_block_heights,json=pendingTxBlockHeights,proto3" json:"pending_tx_block_heights,omitempty"`
	Routers               []ChainContract                             `protobuf:"bytes,22,rep,name=routers,proto3" json:"routers"`
	Frozen                []string                                    `protobuf:"bytes,23,rep,name=frozen,proto3" json:"frozen,omitempty"`
}

func (m *Vault) Reset()         { *m = Vault{} }
func (m *Vault) String() string { return proto.CompactTextString(m) }
func (*Vault) ProtoMessage()    {}
func (*Vault) Descriptor() ([]byte, []int) {
	return fileDescriptor_d76f5cca38dcd496, []int{0}
}
func (m *Vault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vault.Merge(m, src)
}
func (m *Vault) XXX_Size() int {
	return m.Size()
}
func (m *Vault) XXX_DiscardUnknown() {
	xxx_messageInfo_Vault.DiscardUnknown(m)
}

var xxx_messageInfo_Vault proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("types.VaultType", VaultType_name, VaultType_value)
	proto.RegisterEnum("types.VaultStatus", VaultStatus_name, VaultStatus_value)
	proto.RegisterType((*Vault)(nil), "types.Vault")
}

func init() {
	proto.RegisterFile("mayachain/v1/x/mayachain/types/type_vault.proto", fileDescriptor_d76f5cca38dcd496)
}

var fileDescriptor_d76f5cca38dcd496 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x8e, 0xd3, 0x3c,
	0x10, 0xc7, 0x93, 0x4d, 0xdb, 0xfd, 0xea, 0xee, 0x76, 0xbb, 0xd6, 0x7e, 0x8b, 0xd5, 0x43, 0x1a,
	0x10, 0x87, 0xa8, 0x48, 0x8d, 0x28, 0x48, 0x70, 0x25, 0xbd, 0xec, 0x0a, 0x21, 0xa1, 0xb4, 0xac,
	0x04, 0x97, 0x28, 0x49, 0x4d, 0x6a, 0xb5, 0xb1, 0xa3, 0xd8, 0x29, 0x2d, 0x4f, 0xc1, 0x73, 0xf0,
	0x24, 0x3d, 0xee, 0x09, 0x71, 0x5a, 0xa0, 0x7d, 0x0b, 0x4e, 0xc8, 0x4e, 0x0a, 0x01, 0x24, 0xb4,
	0x97, 0x78, 0xe6, 0x37, 0x7f, 0x4f, 0xc6, 0x33, 0x36, 0x70, 0x92, 0x60, 0x1d, 0x44, 0xb3, 0x80,
	0x50, 0x67, 0xf9, 0xd0, 0x59, 0x55, 0x5c, 0xb1, 0x4e, 0x31, 0x57, 0x5f, 0x7f, 0x19, 0xe4, 0x0b,
	0x31, 0x48, 0x33, 0x26, 0x18, 0xac, 0x2b, 0xde, 0xb5, 0x7e, 0xdb, 0x17, 0xb1, 0x24, 0x61, 0xb4,
	0x5c, 0x0a, 0x61, 0xf7, 0xe9, 0x6d, 0x32, 0x2b, 0xe0, 0x47, 0x8c, 0x8a, 0x2c, 0x88, 0xca, 0x5f,
	0x74, 0xcf, 0x62, 0x16, 0x33, 0x65, 0x3a, 0xd2, 0x2a, 0xe8, 0xbd, 0x4f, 0x35, 0x50, 0xbf, 0x92,
	0x85, 0xc0, 0xbb, 0xe0, 0x28, 0x5c, 0xb0, 0x68, 0xee, 0xcf, 0x30, 0x89, 0x67, 0x02, 0xe9, 0x96,
	0x6e, 0x1b, 0x5e, 0x4b, 0xb1, 0x0b, 0x85, 0xe0, 0x05, 0x38, 0x4c, 0xf3, 0xd0, 0x9f, 0xe3, 0x35,
	0x3a, 0xb0, 0x74, 0xbb, 0xe9, 0x3a, 0xdf, 0x6f, 0x7a, 0x0f, 0x62, 0x22, 0x16, 0x41, 0x38, 0x88,
	0x58, 0x52, 0xa9, 0x46, 0x5a, 0x94, 0x4d, 0xf1, 0xbe, 0xfa, 0x97, 0x79, 0xf8, 0x1c, 0xaf, 0xbd,
	0x46, 0xaa, 0x56, 0x78, 0x05, 0xea, 0x11, 0x23, 0x94, 0x23, 0xc3, 0x32, 0xec, 0xd6, 0xf0, 0x68,
	0x50, 0xca, 0x46, 0x8c, 0x50, 0x77, 0xb8, 0xb9, 0xe9, 0x69, 0x1f, 0xbf, 0xf4, 0xfa, 0xb7, 0xca,
	0x2c, 0xb7, 0x70, 0xaf, 0x48, 0x07, 0xef, 0x83, 0x9a, 0xec, 0x00, 0xaa, 0x59, 0xba, 0xdd, 0x1e,
	0x76, 0x06, 0xaa, 0x29, 0x03, 0x75, 0xc0, 0xc9, 0x3a, 0xc5, 0x9e, 0x8a, 0xc2, 0x3e, 0x68, 0x70,
	0x11, 0x88, 0x9c, 0xa3, 0xba, 0xd2, 0xc1, 0xaa, 0x6e, 0xac, 0x22, 0x5e, 0xa9, 0x90, 0x6d, 0x29,
	0x2c, 0x9f, 0x13, 0x1a, 0x61, 0xd4, 0x28, 0xda, 0x52, 0xb0, 0xb1, 0x44, 0xd0, 0x04, 0x20, 0xc1,
	0x49, 0x88, 0x33, 0x3e, 0x23, 0x29, 0x3a, 0xb4, 0x0c, 0xbb, 0xe9, 0x55, 0x08, 0x3c, 0x07, 0x0d,
	0x55, 0x3a, 0x47, 0xff, 0xa9, 0x58, 0xe9, 0x41, 0x1b, 0x74, 0x08, 0x0d, 0x59, 0x4e, 0xa7, 0xbe,
	0x58, 0xf9, 0x11, 0xcb, 0xa9, 0x40, 0x4d, 0x95, 0xbe, 0x5d, 0xf2, 0xc9, 0x6a, 0x24, 0x29, 0xec,
	0x83, 0x53, 0x96, 0x8b, 0x3f, 0xa4, 0x40, 0x49, 0x4f, 0xf6, 0x81, 0xbd, 0xf6, 0x09, 0x40, 0x29,
	0xa6, 0x53, 0x42, 0x63, 0x29, 0xad, 0x8e, 0x94, 0xa3, 0x96, 0x65, 0xd8, 0x86, 0xf7, 0x7f, 0x19,
	0x9f, 0xac, 0xdc, 0x5f, 0xc3, 0xe5, 0xf0, 0x31, 0x38, 0xcc, 0x58, 0x2e, 0x70, 0xc6, 0xd1, 0xb9,
	0x9a, 0xca, 0x59, 0xd9, 0x96, 0x91, 0x2c, 0x77, 0x54, 0xde, 0x26, 0xb7, 0x26, 0xa7, 0xe3, 0xed,
	0xa5, 0xf2, 0x70, 0x6f, 0x33, 0xf6, 0x1e, 0x53, 0x74, 0xa7, 0x38, 0x5c, 0xe1, 0xf5, 0x5d, 0xd0,
	0xfc, 0xd9, 0x76, 0xd8, 0x01, 0x47, 0xaf, 0xe8, 0x9c, 0xb2, 0x77, 0x54, 0xb1, 0x8e, 0x06, 0x4f,
	0x40, 0xeb, 0x19, 0x8f, 0x83, 0x6c, 0x5a, 0x00, 0x1d, 0x42, 0xd0, 0x7e, 0x1d, 0xc7, 0xd3, 0x2c,
	0xe0, 0x64, 0x51, 0xb0, 0x83, 0xfe, 0x18, 0xb4, 0x2a, 0x23, 0x81, 0xa7, 0xe0, 0xf8, 0x92, 0x06,
	0x91, 0x20, 0x4b, 0x5c, 0x4d, 0x53, 0x01, 0xba, 0xd4, 0x78, 0x58, 0x90, 0x8c, 0xd0, 0xb8, 0xcc,
	0x02, 0x8f, 0x41, 0xf3, 0x92, 0x12, 0x51, 0xb8, 0x86, 0xfb, 0x62, 0xf3, 0xcd, 0xd4, 0x36, 0x5b,
	0x53, 0xbf, 0xde, 0x9a, 0xfa, 0xd7, 0xad, 0xa9, 0x7f, 0xd8, 0x99, 0xda, 0xf5, 0xce, 0xd4, 0x3e,
	0xef, 0x4c, 0xed, 0x8d, 0xf3, 0xef, 0x3b, 0xf7, 0xd7, 0x83, 0x0b, 0x1b, 0xea, 0x1d, 0x3d, 0xfa,
	0x11, 0x00, 0x00, 0xff, 0xff, 0x48, 0xbf, 0x95, 0xf1, 0xf3, 0x03, 0x00, 0x00,
}

func (m *Vault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Frozen) > 0 {
		for iNdEx := len(m.Frozen) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Frozen[iNdEx])
			copy(dAtA[i:], m.Frozen[iNdEx])
			i = encodeVarintTypeVault(dAtA, i, uint64(len(m.Frozen[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.Routers) > 0 {
		for iNdEx := len(m.Routers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypeVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.PendingTxBlockHeights) > 0 {
		dAtA2 := make([]byte, len(m.PendingTxBlockHeights)*10)
		var j1 int
		for _, num1 := range m.PendingTxBlockHeights {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypeVault(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x5a
	}
	if m.OutboundTxCount != 0 {
		i = encodeVarintTypeVault(dAtA, i, uint64(m.OutboundTxCount))
		i--
		dAtA[i] = 0x50
	}
	if m.InboundTxCount != 0 {
		i = encodeVarintTypeVault(dAtA, i, uint64(m.InboundTxCount))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chains[iNdEx])
			copy(dAtA[i:], m.Chains[iNdEx])
			i = encodeVarintTypeVault(dAtA, i, uint64(len(m.Chains[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Membership) > 0 {
		for iNdEx := len(m.Membership) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Membership[iNdEx])
			copy(dAtA[i:], m.Membership[iNdEx])
			i = encodeVarintTypeVault(dAtA, i, uint64(len(m.Membership[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.StatusSince != 0 {
		i = encodeVarintTypeVault(dAtA, i, uint64(m.StatusSince))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintTypeVault(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != 0 {
		i = encodeVarintTypeVault(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypeVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTypeVault(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTypeVault(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovTypeVault(uint64(m.BlockHeight))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTypeVault(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTypeVault(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovTypeVault(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovTypeVault(uint64(m.Status))
	}
	if m.StatusSince != 0 {
		n += 1 + sovTypeVault(uint64(m.StatusSince))
	}
	if len(m.Membership) > 0 {
		for _, s := range m.Membership {
			l = len(s)
			n += 1 + l + sovTypeVault(uint64(l))
		}
	}
	if len(m.Chains) > 0 {
		for _, s := range m.Chains {
			l = len(s)
			n += 1 + l + sovTypeVault(uint64(l))
		}
	}
	if m.InboundTxCount != 0 {
		n += 1 + sovTypeVault(uint64(m.InboundTxCount))
	}
	if m.OutboundTxCount != 0 {
		n += 1 + sovTypeVault(uint64(m.OutboundTxCount))
	}
	if len(m.PendingTxBlockHeights) > 0 {
		l = 0
		for _, e := range m.PendingTxBlockHeights {
			l += sovTypeVault(uint64(e))
		}
		n += 1 + sovTypeVault(uint64(l)) + l
	}
	if len(m.Routers) > 0 {
		for _, e := range m.Routers {
			l = e.Size()
			n += 2 + l + sovTypeVault(uint64(l))
		}
	}
	if len(m.Frozen) > 0 {
		for _, s := range m.Frozen {
			l = len(s)
			n += 2 + l + sovTypeVault(uint64(l))
		}
	}
	return n
}

func sovTypeVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeVault(x uint64) (n int) {
	return sovTypeVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = gitlab_com_mayachain_mayanode_common.PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, common.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VaultStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusSince", wireType)
			}
			m.StatusSince = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusSince |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Membership", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Membership = append(m.Membership, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxCount", wireType)
			}
			m.InboundTxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundTxCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxCount", wireType)
			}
			m.OutboundTxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypeVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingTxBlockHeights = append(m.PendingTxBlockHeights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypeVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypeVault
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypeVault
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingTxBlockHeights) == 0 {
					m.PendingTxBlockHeights = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypeVault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingTxBlockHeights = append(m.PendingTxBlockHeights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTxBlockHeights", wireType)
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routers = append(m.Routers, ChainContract{})
			if err := m.Routers[len(m.Routers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frozen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Frozen = append(m.Frozen, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypeVault
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypeVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeVault = fmt.Errorf("proto: unexpected end of group")
)
