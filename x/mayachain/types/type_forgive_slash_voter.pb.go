// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mayachain/v1/x/mayachain/types/type_forgive_slash_voter.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ForgiveSlashVoter struct {
	NodeAddress         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"node_address,omitempty"`
	BlockHeight         int64                                         `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	ProposedBlockHeight int64                                         `protobuf:"varint,3,opt,name=proposed_block_height,json=proposedBlockHeight,proto3" json:"proposed_block_height,omitempty"`
	Signers             []string                                      `protobuf:"bytes,4,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *ForgiveSlashVoter) Reset()      { *m = ForgiveSlashVoter{} }
func (*ForgiveSlashVoter) ProtoMessage() {}
func (*ForgiveSlashVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_c18d9c4f8b6c8dc5, []int{0}
}
func (m *ForgiveSlashVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForgiveSlashVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForgiveSlashVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForgiveSlashVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForgiveSlashVoter.Merge(m, src)
}
func (m *ForgiveSlashVoter) XXX_Size() int {
	return m.Size()
}
func (m *ForgiveSlashVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_ForgiveSlashVoter.DiscardUnknown(m)
}

var xxx_messageInfo_ForgiveSlashVoter proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ForgiveSlashVoter)(nil), "types.ForgiveSlashVoter")
}

func init() {
	proto.RegisterFile("mayachain/v1/x/mayachain/types/type_forgive_slash_voter.proto", fileDescriptor_c18d9c4f8b6c8dc5)
}

var fileDescriptor_c18d9c4f8b6c8dc5 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xbb, 0x4e, 0x33, 0x31,
	0x10, 0x85, 0xd7, 0x7f, 0x7e, 0x40, 0x38, 0x69, 0x58, 0x40, 0x5a, 0x51, 0x98, 0x40, 0x95, 0x26,
	0xb1, 0x02, 0x35, 0x45, 0x52, 0x20, 0xea, 0x70, 0x29, 0x68, 0x2c, 0xc7, 0x6b, 0xbc, 0x56, 0x2e,
	0xb3, 0xb2, 0x4d, 0x44, 0x3a, 0x1e, 0x81, 0xc7, 0x4a, 0x99, 0x32, 0xa2, 0x40, 0x64, 0xf3, 0x16,
	0x54, 0xc8, 0xde, 0x44, 0x01, 0xd1, 0xd8, 0x33, 0x67, 0xce, 0x67, 0x8d, 0x0f, 0xbe, 0x1a, 0xf1,
	0x29, 0x17, 0x19, 0xd7, 0x63, 0x3a, 0x69, 0xd3, 0x17, 0xba, 0x6d, 0xdd, 0x34, 0x97, 0x36, 0x9c,
	0xec, 0x09, 0x8c, 0xd2, 0x13, 0xc9, 0xec, 0x90, 0xdb, 0x8c, 0x4d, 0xc0, 0x49, 0xd3, 0xca, 0x0d,
	0x38, 0x88, 0x77, 0x82, 0xeb, 0xe4, 0x48, 0x81, 0x82, 0xa0, 0x50, 0x5f, 0x95, 0xc3, 0xf3, 0x77,
	0x84, 0x0f, 0xae, 0x4b, 0xf4, 0xd6, 0x93, 0x0f, 0x1e, 0x8c, 0xef, 0x70, 0x6d, 0x0c, 0xa9, 0x64,
	0x3c, 0x4d, 0x8d, 0xb4, 0x36, 0x41, 0x75, 0xd4, 0xa8, 0x75, 0xdb, 0x5f, 0x1f, 0xa7, 0x4d, 0xa5,
	0x5d, 0xf6, 0xdc, 0x6f, 0x09, 0x18, 0x51, 0x01, 0x76, 0x04, 0x76, 0x7d, 0x35, 0x6d, 0x3a, 0x28,
	0xf7, 0x69, 0x75, 0x84, 0xe8, 0x94, 0x60, 0xaf, 0xea, 0x9f, 0x59, 0x37, 0xf1, 0x19, 0xae, 0xf5,
	0x87, 0x20, 0x06, 0x2c, 0x93, 0x5a, 0x65, 0x2e, 0xf9, 0x57, 0x47, 0x8d, 0x4a, 0xaf, 0x1a, 0xb4,
	0x9b, 0x20, 0xc5, 0x17, 0xf8, 0x38, 0x37, 0x90, 0x83, 0x95, 0x29, 0xfb, 0xe5, 0xad, 0x04, 0xef,
	0xe1, 0x66, 0xd8, 0xfd, 0xc1, 0x24, 0x78, 0xcf, 0x6a, 0x35, 0x96, 0xc6, 0x26, 0xff, 0xeb, 0x95,
	0xc6, 0x7e, 0x6f, 0xd3, 0x76, 0xef, 0x67, 0x4b, 0x12, 0x2d, 0x96, 0x24, 0x7a, 0x2d, 0x48, 0x34,
	0x2b, 0x08, 0x9a, 0x17, 0x04, 0x7d, 0x16, 0x04, 0xbd, 0xad, 0x48, 0x34, 0x5f, 0x91, 0x68, 0xb1,
	0x22, 0xd1, 0x23, 0x55, 0xda, 0x0d, 0x79, 0xf9, 0xa5, 0x6d, 0xb4, 0xbe, 0xf2, 0xcb, 0xff, 0xcd,
	0xbb, 0xbf, 0x1b, 0xa2, 0xbb, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x83, 0x3b, 0x49, 0x98,
	0x01, 0x00, 0x00,
}

func (m *ForgiveSlashVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForgiveSlashVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForgiveSlashVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTypeForgiveSlashVoter(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ProposedBlockHeight != 0 {
		i = encodeVarintTypeForgiveSlashVoter(dAtA, i, uint64(m.ProposedBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTypeForgiveSlashVoter(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintTypeForgiveSlashVoter(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeForgiveSlashVoter(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeForgiveSlashVoter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ForgiveSlashVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovTypeForgiveSlashVoter(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTypeForgiveSlashVoter(uint64(m.BlockHeight))
	}
	if m.ProposedBlockHeight != 0 {
		n += 1 + sovTypeForgiveSlashVoter(uint64(m.ProposedBlockHeight))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTypeForgiveSlashVoter(uint64(l))
		}
	}
	return n
}

func sovTypeForgiveSlashVoter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeForgiveSlashVoter(x uint64) (n int) {
	return sovTypeForgiveSlashVoter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ForgiveSlashVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeForgiveSlashVoter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForgiveSlashVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForgiveSlashVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeForgiveSlashVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypeForgiveSlashVoter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeForgiveSlashVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = append(m.NodeAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeAddress == nil {
				m.NodeAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeForgiveSlashVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedBlockHeight", wireType)
			}
			m.ProposedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeForgiveSlashVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposedBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeForgiveSlashVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeForgiveSlashVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeForgiveSlashVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeForgiveSlashVoter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypeForgiveSlashVoter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypeForgiveSlashVoter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeForgiveSlashVoter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeForgiveSlashVoter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeForgiveSlashVoter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeForgiveSlashVoter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeForgiveSlashVoter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeForgiveSlashVoter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeForgiveSlashVoter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeForgiveSlashVoter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeForgiveSlashVoter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeForgiveSlashVoter = fmt.Errorf("proto: unexpected end of group")
)
