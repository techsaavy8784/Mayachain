/*
Mayanode API

Mayanode REST API.

Contact: devs@mayachain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Bucket struct for Bucket
type Bucket struct {
	BalanceAsset string `json:"balance_asset"`
	Asset string `json:"asset"`
	// the total pool liquidity provider units
	LPUnits string `json:"LP_units"`
	Status string `json:"status"`
}

// NewBucket instantiates a new Bucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucket(balanceAsset string, asset string, lPUnits string, status string) *Bucket {
	this := Bucket{}
	this.BalanceAsset = balanceAsset
	this.Asset = asset
	this.LPUnits = lPUnits
	this.Status = status
	return &this
}

// NewBucketWithDefaults instantiates a new Bucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketWithDefaults() *Bucket {
	this := Bucket{}
	return &this
}

// GetBalanceAsset returns the BalanceAsset field value
func (o *Bucket) GetBalanceAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BalanceAsset
}

// GetBalanceAssetOk returns a tuple with the BalanceAsset field value
// and a boolean to check if the value has been set.
func (o *Bucket) GetBalanceAssetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BalanceAsset, true
}

// SetBalanceAsset sets field value
func (o *Bucket) SetBalanceAsset(v string) {
	o.BalanceAsset = v
}

// GetAsset returns the Asset field value
func (o *Bucket) GetAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *Bucket) GetAssetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *Bucket) SetAsset(v string) {
	o.Asset = v
}

// GetLPUnits returns the LPUnits field value
func (o *Bucket) GetLPUnits() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LPUnits
}

// GetLPUnitsOk returns a tuple with the LPUnits field value
// and a boolean to check if the value has been set.
func (o *Bucket) GetLPUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LPUnits, true
}

// SetLPUnits sets field value
func (o *Bucket) SetLPUnits(v string) {
	o.LPUnits = v
}

// GetStatus returns the Status field value
func (o *Bucket) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Bucket) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Bucket) SetStatus(v string) {
	o.Status = v
}

func (o Bucket) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["balance_asset"] = o.BalanceAsset
	}
	if true {
		toSerialize["asset"] = o.Asset
	}
	if true {
		toSerialize["LP_units"] = o.LPUnits
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableBucket struct {
	value *Bucket
	isSet bool
}

func (v NullableBucket) Get() *Bucket {
	return v.value
}

func (v *NullableBucket) Set(val *Bucket) {
	v.value = val
	v.isSet = true
}

func (v NullableBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucket(val *Bucket) *NullableBucket {
	return &NullableBucket{value: val, isSet: true}
}

func (v NullableBucket) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


